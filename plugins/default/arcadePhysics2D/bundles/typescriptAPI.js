(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
/// <reference path="../../typescript/typescriptAPI/TypeScriptAPIPlugin.d.ts" />
"use strict";

SupCore.system.registerPlugin("typescriptAPI", "Sup.ArcadePhysics2D", {
    code: "namespace Sup {\n  export namespace ArcadePhysics2D {\n    export function getAllBodies() {\n      var allBodies = [];\n      for (var body of SupEngine.ArcadePhysics2D.allBodies) allBodies.push(body.__outer);\n      return allBodies;\n    }\n    export function setGravity(gravity: number|Sup.Math.Vector2, y?: number) {\n      if (typeof gravity === \"number\") SupEngine.ArcadePhysics2D.gravity.set(gravity, y);\n      else SupEngine.ArcadePhysics2D.gravity.set(gravity.x, gravity.y);\n    }\n    export function getGravity() { return new Sup.Math.Vector2(SupEngine.ArcadePhysics2D.gravity.x, SupEngine.ArcadePhysics2D.gravity.y)}\n    export function intersects(body1, body2) {\n      return SupEngine.ArcadePhysics2D.intersects(body1.__inner, body2.__inner);\n    }\n    export function collides(body1, body2) {\n      var bodies = [];\n      if (Array.isArray(body2) ) {\n        body2.forEach((body) => {\n          bodies.push(body.__inner);\n          })\n        }\n      else bodies.push(body2.__inner);\n      return SupEngine.ArcadePhysics2D.collides(body1.__inner, bodies);\n    }\n  }\n}\n",
    defs: "declare namespace Sup {\n  namespace ArcadePhysics2D {\n    function getAllBodies(): Array<Body>;\n    function setGravity(gravity: Sup.Math.Vector2);\n    function setGravity(x: number, y: number);\n    function getGravity(): Sup.Math.Vector2;\n    function intersects(body1: Body, body2: Body): boolean;\n    function collides(body1: Body, body2: Body): boolean;\n    function collides(body1: Body, body2: Array<Body>): boolean;\n  }\n}\n",
});
SupCore.system.registerPlugin("typescriptAPI", "ArcadeBody2D", {
    code: "namespace Sup {\n  export namespace ArcadePhysics2D {\n    export enum BodyType { Box, TileMap };\n\n    export class Body extends ActorComponent {\n      constructor(actor: Sup.Actor, type: BodyType, options) {\n        super(actor);\n\n        this.__inner = new SupEngine.componentClasses.ArcadeBody2D(actor.__inner);\n        if (type === Sup.ArcadePhysics2D.BodyType.Box) this.__inner.setupBox(options);\n        else if (type === Sup.ArcadePhysics2D.BodyType.TileMap) {\n          options.tileSetAsset = player.getOuterAsset(options.tileMapAsset.__inner.data.tileSetId);\n          this.__inner.setupTileMap(options);\n        }\n        this.__inner.__outer = this;\n        this.actor.arcadeBody2D = this;\n      }\n      destroy() {\n        this.actor.arcadeBody2D = null;\n        super.destroy();\n      }\n\n      setEnabled(enabled: boolean) { this.__inner.enabled = enabled; return this; }\n      getEnabled() { return this.__inner.enabled; }\n\n      setMovable(movable: boolean) {\n        this.__inner.movable = movable;\n        return this;\n      }\n      getMovable() { return this.__inner.movable; }\n\n      setCustomGravity(gravity: Sup.Math.XY|number, y?: number) {\n        if (typeof gravity === \"number\") {\n          this.__inner.customGravity.x = gravity;\n          this.__inner.customGravity.y = y;\n        } else {\n          this.__inner.customGravity.x = gravity.x;\n          this.__inner.customGravity.y = gravity.y;\n        }\n      }\n      setCustomGravityX(x: number) { this.__inner.customGravity.x = x; }\n      setCustomGravityY(y: number) { this.__inner.customGravity.y = y; }\n      getCustomGravity() { return new Sup.Math.Vector2(this.__inner.customGravity.x, this.__inner.customGravity.y); }\n      getCustomGravityX() { return this.__inner.customGravity.x; }\n      getCustomGravityY() { return this.__inner.customGravity.y; }\n\n      setSize(width: number, height: number) {\n        this.__inner.width = width;\n        this.__inner.height = height;\n        return this;\n      }\n      getSize() { return { width: this.__inner.width, height: this.__inner.height}; }\n\n      setOffset(offset) {\n        this.__inner.offsetX = offset.x;\n        this.__inner.position.x = this.__inner.actorPosition.x + offset.x;\n        this.__inner.offsetY = offset.y;\n        this.__inner.position.y = this.__inner.actorPosition.y + offset.y;\n        return this;\n      }\n      getOffset() { return new Sup.Math.Vector2(this.__inner.offsetX, this.__inner.offsetY); }\n\n      warpPosition(position: Sup.Math.XY|number, y?: number) {\n        if (typeof position === \"number\") this.__inner.warpPosition(position, y);\n        else this.__inner.warpPosition(position.x, position.y);\n        return this;\n      }\n\n      setVelocity(velocity: Sup.Math.XY|number, y?: number) {\n        if (typeof velocity === \"number\") {\n          this.__inner.velocity.x = velocity;\n          this.__inner.velocity.y = y;\n        } else {\n          this.__inner.velocity.x = velocity.x;\n          this.__inner.velocity.y = velocity.y;\n        }\n        return this;\n      }\n      setVelocityX(x: number) {\n        this.__inner.velocity.x = x;\n        return this;\n      }\n      setVelocityY(y: number) {\n        this.__inner.velocity.y = y;\n        return this;\n      }\n      getVelocity() { return new Sup.Math.Vector2(this.__inner.velocity.x, this.__inner.velocity.y); }\n      getVelocityX() { return this.__inner.velocity.x; }\n      getVelocityY() { return this.__inner.velocity.y; }\n\n      addVelocity(velocity: Sup.Math.XY|number, y?: number) {\n        if (typeof velocity === \"number\") {\n          this.__inner.velocity.x += velocity;\n          this.__inner.velocity.y += y;\n        } else {\n          this.__inner.velocity.x += velocity.x;\n          this.__inner.velocity.y += velocity.y;\n        }\n      }\n      addVelocityX(x: number) { this.__inner.velocity.x += x; }\n      addVelocityY(y: number) { this.__inner.velocity.y += y; }\n\n      setVelocityMin(velocityMin: Sup.Math.XY|number, y?: number) {\n        if (typeof velocityMin === \"number\") {\n          this.__inner.velocityMin.x = velocityMin;\n          this.__inner.velocityMin.y = y;\n        } else {\n          this.__inner.velocityMin.x = velocityMin.x;\n          this.__inner.velocityMin.y = velocityMin.y;\n        }\n        return this;\n      }\n      getVelocityMin() { return new Sup.Math.Vector2(this.__inner.velocityMin.x, this.__inner.velocityMin.y); }\n\n      setVelocityMax(velocityMax: Sup.Math.XY|number, y?: number) {\n        if (typeof velocityMax === \"number\") {\n          this.__inner.velocityMax.x = velocityMax;\n          this.__inner.velocityMax.y = y;\n        } else {\n          this.__inner.velocityMax.x = velocityMax.x;\n          this.__inner.velocityMax.y = velocityMax.y;\n        }\n        return this;\n      }\n      getVelocityMax() { return new Sup.Math.Vector2(this.__inner.velocityMax.x, this.__inner.velocityMax.y); }\n\n      setVelocityMultiplier(velocityMultiplier: Sup.Math.XY|number, y?: number) {\n        if (typeof velocityMultiplier === \"number\") {\n          this.__inner.velocityMultiplier.x = velocityMultiplier;\n          this.__inner.velocityMultiplier.y = y;\n        } else {\n          this.__inner.velocityMultiplier.x = velocityMultiplier.x;\n          this.__inner.velocityMultiplier.y = velocityMultiplier.y;\n        }\n        return this;\n      }\n      getVelocityMultiplier() { return new Sup.Math.Vector2(this.__inner.velocityMultiplier.x, this.__inner.velocityMultiplier.y); }\n\n      getTouches() {\n        return {\n          left: this.__inner.touches.left, right : this.__inner.touches.right,\n          top : this.__inner.touches.top , bottom: this.__inner.touches.bottom\n        };\n      }\n    }\n  }\n}\n",
    defs: "interface BoxOptions {\n  movable: boolean;\n  width: number;\n  height: number;\n  offset?: { x: number; y: number; };\n  bounce?: { x: number; y: number; };\n}\n\ninterface TileMapOptions {\n  tileMapAsset: Sup.TileMap;\n  tileSetPropertyName?: string;\n  layersIndex?: string;\n}\n\ndeclare namespace Sup {\n  namespace ArcadePhysics2D {\n    enum BodyType { Box, TileMap }\n\n    class Body extends ActorComponent {\n      constructor(actor: Sup.Actor, type: BodyType, options: BoxOptions|TileMapOptions);\n\n      setEnabled(enabled: boolean): Body;\n      getEnabled(): boolean;\n      setMovable(movable: boolean): Body;\n      getMovable(): boolean;\n\n      setCustomGravity(gravity: Sup.Math.XY): Body;\n      setCustomGravity(x: number, y: number): Body;\n      setCustomGravityX(x: number): Body;\n      setCustomGravityY(y: number): Body;\n      getCustomGravity(): Sup.Math.Vector2;\n      getCustomGravityX(): number;\n      getCustomGravityY(): number;\n\n      setSize(width: number, height: number): Body;\n      getSize(): { width: number; height: number; };\n      setOffset(offset: { x: number; y: number; }): Body;\n      getOffset(): Sup.Math.Vector2;\n\n      warpPosition(position: Sup.Math.XY): Body;\n      warpPosition(x: number, y: number): Body;\n\n      setVelocity(velocity: Sup.Math.XY): Body;\n      setVelocity(x: number, y: number): Body;\n      setVelocityX(x: number): Body;\n      setVelocityY(y: number): Body;\n      getVelocity(): Sup.Math.Vector2;\n      getVelocityX(): number;\n      getVelocityY(): number;\n      addVelocity(velocity: Sup.Math.XY): Body;\n      addVelocity(x: number, y: number): Body;\n      addVelocityX(x: number): Body;\n      addVelocityY(y: number): Body;\n\n      setVelocityMin(velocityMin: Sup.Math.XY): Body;\n      setVelocityMin(x: number, y: number): Body;\n      getVelocityMin(): Sup.Math.Vector2;\n      setVelocityMax(velocityMax: Sup.Math.XY): Body;\n      setVelocityMax(x: number, y: number): Body;\n      getVelocityMax(): Sup.Math.Vector2;\n      setVelocityMultiplier(velocityMultiplier: Sup.Math.XY): Body;\n      setVelocityMultiplier(x: number, y: number): Body;\n      getVelocityMultiplier(): Sup.Math.Vector2;\n\n      getTouches(): { top: boolean; bottom: boolean; right: boolean; left: boolean; };\n    }\n  }\n}\n",
    exposeActorComponent: { propertyName: "arcadeBody2D", className: "Sup.ArcadePhysics2D.Body" },
});

},{}]},{},[1]);
